// <auto-generated />
using System;
using LibraryMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryMVC.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20241106013724_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryMVC.Entity.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Admin Address",
                            ConcurrencyStamp = "2e5f2460-78bb-4479-9adb-8891207a2e83",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("727ae296-7a61-4871-b530-28f15ea62050"),
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6xobf2F0sDkwPyhHSGAOP9NubrURARJdeuWDypxvPk8Xe6VmgTU12ejhGIlOjXQA==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7572eb36-6fc8-4c56-a80e-daf34ccb5dcc",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "20020 Rosenbaum Drive",
                            ConcurrencyStamp = "df59d357-efbb-497a-8567-30b2cb930f75",
                            Email = "Tre.Torphy3@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("08fb96d4-e236-40ea-aac3-6ba468e9ef0f"),
                            LockoutEnabled = false,
                            Name = "Marlee Cruickshank",
                            NormalizedEmail = "TRE.TORPHY3@GMAIL.COM",
                            NormalizedUserName = "TRE.TORPHY3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvkjDUsIhsQG+qo9q0Hq+41zCBAslhDfJcccSX3480/pe1+dNt9DGsR4K8FqxYk2w==",
                            PhoneNumber = "1-348-398-2822 x42124",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc64e50f-f302-4194-a7e7-8d2ba96be9f0",
                            TwoFactorEnabled = false,
                            UserName = "Tre.Torphy3@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "47466 Altenwerth Club",
                            ConcurrencyStamp = "152b349b-3a20-4824-81ed-c8a3fcdaa56a",
                            Email = "Rolando.Zulauf@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("a7979d46-e381-4e03-8d8c-de9e5d6b5493"),
                            LockoutEnabled = false,
                            Name = "Precious Heller",
                            NormalizedEmail = "ROLANDO.ZULAUF@HOTMAIL.COM",
                            NormalizedUserName = "ROLANDO.ZULAUF@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHtuHnpcJO1bcTUStjtenR9/F44CJ8g36/2aAopUXAumKkXmbVCfCgVKx1yhLCqTvA==",
                            PhoneNumber = "341.369.1396 x26801",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a191dda3-32e0-464b-ae4a-cfbb1de9a763",
                            TwoFactorEnabled = false,
                            UserName = "Rolando.Zulauf@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "06617 Beverly Cliff",
                            ConcurrencyStamp = "c7f4bd72-8f7c-4dfb-b16a-a9c74e3eefb1",
                            Email = "Shana.Kautzer22@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("51a9193e-bab3-4470-b4e0-cb58e064be55"),
                            LockoutEnabled = false,
                            Name = "Elva Labadie",
                            NormalizedEmail = "SHANA.KAUTZER22@HOTMAIL.COM",
                            NormalizedUserName = "SHANA.KAUTZER22@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO27y7GgsBjF0h3JJTuIejyd7AlHAggoOcSyL5fQULy9YVW54qhjRlRPNpM0FU+BSw==",
                            PhoneNumber = "592-507-2060 x9253",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "332cafe7-c220-4351-866f-f279ab7b88bd",
                            TwoFactorEnabled = false,
                            UserName = "Shana.Kautzer22@hotmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "173 Donald Tunnel",
                            ConcurrencyStamp = "1e50e93d-e1e7-4675-9eb0-5b07f11bdd69",
                            Email = "Gilberto68@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("9a16aeaf-c0db-48c7-a4c9-af7148904620"),
                            LockoutEnabled = false,
                            Name = "Forrest Ebert",
                            NormalizedEmail = "GILBERTO68@HOTMAIL.COM",
                            NormalizedUserName = "GILBERTO68@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECyPKNY0BQ8agvnMn6RoYEP4GfUobP2K6kt1IvbWadtREzvWvEyag9bzCgmCxXzo9A==",
                            PhoneNumber = "1-312-794-5246 x207",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc348a76-91a8-4d16-88dc-e2fa782642d8",
                            TwoFactorEnabled = false,
                            UserName = "Gilberto68@hotmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "932 Bennie Center",
                            ConcurrencyStamp = "c24c07de-7b00-4631-9d66-e41ec1d63889",
                            Email = "Helena32@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("ab002241-e0d0-4a42-8542-f8c30747982b"),
                            LockoutEnabled = false,
                            Name = "Adolf Sanford",
                            NormalizedEmail = "HELENA32@HOTMAIL.COM",
                            NormalizedUserName = "HELENA32@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdQg7nCmWOpRYXfKniltw3q5Sbp0tuCaKEi0Y93TT/rUISH36vZ0E3smODZrOPGxA==",
                            PhoneNumber = "267.973.3355 x742",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01f9b56e-4f34-4653-8b20-5ddfa9fdb9e2",
                            TwoFactorEnabled = false,
                            UserName = "Helena32@hotmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "5864 Rod Light",
                            ConcurrencyStamp = "145f7233-f9d0-46b6-b01d-29d455e1db33",
                            Email = "Marcel_Zieme95@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("56e19e8b-b83b-4d52-95f5-2731ce2d0638"),
                            LockoutEnabled = false,
                            Name = "Connie Quitzon",
                            NormalizedEmail = "MARCEL_ZIEME95@HOTMAIL.COM",
                            NormalizedUserName = "MARCEL_ZIEME95@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECePmywMXOzF5+LRsEaAmhYof8KJyLbV0RFoibRSc3RqkKh7YcMx5eoPEaZNYFGazw==",
                            PhoneNumber = "681-538-1439 x7115",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c282685-5eba-4ae9-9cfc-a0d222bbae1c",
                            TwoFactorEnabled = false,
                            UserName = "Marcel_Zieme95@hotmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "10370 Huels Coves",
                            ConcurrencyStamp = "7b9fde09-e765-4b7e-85b8-1ac50eb7e249",
                            Email = "Travis.Gorczany@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("606698ff-4b14-4fca-be38-b14372aff76a"),
                            LockoutEnabled = false,
                            Name = "Ivory Upton",
                            NormalizedEmail = "TRAVIS.GORCZANY@HOTMAIL.COM",
                            NormalizedUserName = "TRAVIS.GORCZANY@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOPnXbsq3pLg+IMQuBW32O0BJcMtYy62vjpN77Dih/z01ZgfQdWJ/qifEkMfc+g1tw==",
                            PhoneNumber = "1-409-911-1722 x0081",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da032778-1849-494b-bf87-e7136eaa1f04",
                            TwoFactorEnabled = false,
                            UserName = "Travis.Gorczany@hotmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "93780 Aniyah Manors",
                            ConcurrencyStamp = "89cd6931-fc05-4661-acea-efd81a604d58",
                            Email = "Treva_Quitzon@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("7c0feafe-f7fa-4a20-8ae7-3c1d0e737703"),
                            LockoutEnabled = false,
                            Name = "Linnie Ruecker",
                            NormalizedEmail = "TREVA_QUITZON@HOTMAIL.COM",
                            NormalizedUserName = "TREVA_QUITZON@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK12w02rw9zZJNQfafiWkEMZCVi5xJOcWugCwHMOeJ3bwfH52NJ7hr0SpRvy1WP2rA==",
                            PhoneNumber = "(347) 572-4863",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b047cbba-790b-429d-b842-fafcfecb905f",
                            TwoFactorEnabled = false,
                            UserName = "Treva_Quitzon@hotmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "828 Shanahan Forges",
                            ConcurrencyStamp = "83e67e6c-59a6-41bc-b8c9-e13cf111644c",
                            Email = "Maribel81@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("75e786fe-dcc7-4899-ab89-463570c06e48"),
                            LockoutEnabled = false,
                            Name = "Buck Kunde",
                            NormalizedEmail = "MARIBEL81@GMAIL.COM",
                            NormalizedUserName = "MARIBEL81@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPHze2UNWGJRcwV2QeBHdAatnrYOhKD9gP11EuHTMMcvxD6LGCjHrFsYw0LJhAH9kg==",
                            PhoneNumber = "866-676-4646",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2c879b7-dd34-4eed-8e05-8d29e2c16ced",
                            TwoFactorEnabled = false,
                            UserName = "Maribel81@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "362 Olson Mountain",
                            ConcurrencyStamp = "300bba0f-08ce-48b3-93e2-0898fc3d68e6",
                            Email = "Tiffany_Beier33@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("c5e7752a-3e88-4330-84f9-25c9b2e8bcf0"),
                            LockoutEnabled = false,
                            Name = "Myra Emard",
                            NormalizedEmail = "TIFFANY_BEIER33@HOTMAIL.COM",
                            NormalizedUserName = "TIFFANY_BEIER33@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDmmHi519vkuWJLpixhI3cxhgYJtfv/5xcERXyWttNchNsbD5gICApupaD9yefcTA==",
                            PhoneNumber = "743-762-1409",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07eb6b6d-7377-4d4c-a870-fb700863d022",
                            TwoFactorEnabled = false,
                            UserName = "Tiffany_Beier33@hotmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "281 Muller Turnpike",
                            ConcurrencyStamp = "23b58b29-f1af-4f9e-b317-acfdbab1dff6",
                            Email = "Madeline95@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("a02e8fc9-d75d-4e64-8c9b-94720fe25f69"),
                            LockoutEnabled = false,
                            Name = "Gregoria Mertz",
                            NormalizedEmail = "MADELINE95@GMAIL.COM",
                            NormalizedUserName = "MADELINE95@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2GQtE767vM8NsD2PaJrWjh2OKgBN6Pgl2s+6zoknee6ruHnm8+eTObxmEYnipjrQ==",
                            PhoneNumber = "762.931.4569 x699",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8f45742-ebd6-42e2-89b7-f0b598af42cd",
                            TwoFactorEnabled = false,
                            UserName = "Madeline95@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "7897 Antonina Knoll",
                            ConcurrencyStamp = "04a1f758-d54d-450f-a9ee-aa5fbf962193",
                            Email = "David.Kautzer@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("dbbd9b3f-9c8f-491c-88fc-59a8f7bb782f"),
                            LockoutEnabled = false,
                            Name = "Hunter Grimes",
                            NormalizedEmail = "DAVID.KAUTZER@HOTMAIL.COM",
                            NormalizedUserName = "DAVID.KAUTZER@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFwsEwm0CSukKs4djoMn/vIDKYDf4bJpGPdgY688zYc5oM/ktlxG+GGUQNUFXROAg==",
                            PhoneNumber = "270.842.7484 x4958",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd7762e6-acaf-44f3-a6d8-bbacbffacf68",
                            TwoFactorEnabled = false,
                            UserName = "David.Kautzer@hotmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "38293 Juliana Islands",
                            ConcurrencyStamp = "0f7e0936-47b9-492c-8693-c6936645ee9a",
                            Email = "Alexa51@yahoo.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("16e4ad6b-e6f7-417a-a9f1-c102e17a1767"),
                            LockoutEnabled = false,
                            Name = "Norwood Towne",
                            NormalizedEmail = "ALEXA51@YAHOO.COM",
                            NormalizedUserName = "ALEXA51@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECvf2Le1mD0yXzuQzLk04vOykGU+GrarASUVjWluSRDSZlY5ne3ClP5mme/VwYZifQ==",
                            PhoneNumber = "1-965-272-7658 x9053",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42fe669f-2ca8-440a-acb4-3e4dea6f6159",
                            TwoFactorEnabled = false,
                            UserName = "Alexa51@yahoo.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "172 Ledner Fords",
                            ConcurrencyStamp = "504e5ab4-57f6-4716-8754-b2d0782f2ff0",
                            Email = "Alison79@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("8a8c4e60-3a0b-4ffa-b5df-992852757cfe"),
                            LockoutEnabled = false,
                            Name = "Gardner Sporer",
                            NormalizedEmail = "ALISON79@GMAIL.COM",
                            NormalizedUserName = "ALISON79@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEyQ/wQJZwxeifKKQLR9L3eZ4E6SAVfRBmEWAmYEzXPvKFZUncJ/Np9U4G09oYphZA==",
                            PhoneNumber = "919.223.6317",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e5c970-a5c1-4f1d-a27f-0b0d562e55cd",
                            TwoFactorEnabled = false,
                            UserName = "Alison79@gmail.com"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "685 Jast Cliffs",
                            ConcurrencyStamp = "f62e2175-3a18-41dc-8b1c-162f0799fe1a",
                            Email = "Jazlyn_Considine67@hotmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("c83e6913-2d58-4c8f-971f-2fda26b6b8e9"),
                            LockoutEnabled = false,
                            Name = "Betty Lueilwitz",
                            NormalizedEmail = "JAZLYN_CONSIDINE67@HOTMAIL.COM",
                            NormalizedUserName = "JAZLYN_CONSIDINE67@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwi9o93JVDR/qqqPY1wuNQp9hi6wtywt/MSmgYMP3terbU4F96Qhq+Z4HBQDXHGLg==",
                            PhoneNumber = "1-697-884-8725 x313",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3858672-b5bd-4e40-b79a-3f2fa2e81600",
                            TwoFactorEnabled = false,
                            UserName = "Jazlyn_Considine67@hotmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "063 Quitzon Junction",
                            ConcurrencyStamp = "814d47d4-9e86-4d91-87fd-c8d1562da2e0",
                            Email = "Elenora71@yahoo.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("35a6209f-3f8f-446b-8ce4-09e2b718666d"),
                            LockoutEnabled = false,
                            Name = "Emerald Hoppe",
                            NormalizedEmail = "ELENORA71@YAHOO.COM",
                            NormalizedUserName = "ELENORA71@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+e+OM3fCWP/C8i/giJBAJwiEO7oXp20n4nBiebm3dYXyRhV/CkdHeMVcU0JhhLRw==",
                            PhoneNumber = "565.535.9196 x003",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4e08588-3bd2-4f77-891f-7b07963e6836",
                            TwoFactorEnabled = false,
                            UserName = "Elenora71@yahoo.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "309 Nona Common",
                            ConcurrencyStamp = "ac0d1f18-86d2-414d-a1b7-99cf7f4a1940",
                            Email = "Taurean_Crona80@gmail.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("abc31af5-ba57-4bf8-a43f-23b46017dd3a"),
                            LockoutEnabled = false,
                            Name = "Susan Bahringer",
                            NormalizedEmail = "TAUREAN_CRONA80@GMAIL.COM",
                            NormalizedUserName = "TAUREAN_CRONA80@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+K73Fwra1gpQ6a+WT6X1X88ioBJAquKdb9jrWQKLzqm0JsQpqflR0vFteMVb7yNg==",
                            PhoneNumber = "882.235.9884 x693",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52bf44a0-1cdd-4792-a5a6-146bc536e6d5",
                            TwoFactorEnabled = false,
                            UserName = "Taurean_Crona80@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "4938 Erdman Camp",
                            ConcurrencyStamp = "4453198e-2184-490b-8d69-191f742205b2",
                            Email = "Milan93@yahoo.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("52db1c36-52f0-440e-98f4-db9974e723cc"),
                            LockoutEnabled = false,
                            Name = "Gerhard Witting",
                            NormalizedEmail = "MILAN93@YAHOO.COM",
                            NormalizedUserName = "MILAN93@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8bNk7gG/NBQ4cMO2jXHYVEiQH5CY8OXRa4/ChWgzZIZq6BqKaMcbEKqVH0myAlaw==",
                            PhoneNumber = "(329) 519-1288",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8437982c-80eb-4f5c-b5bb-d899b127e1fe",
                            TwoFactorEnabled = false,
                            UserName = "Milan93@yahoo.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "71082 Paucek Rapids",
                            ConcurrencyStamp = "ba1b8a48-7d88-4da6-bb7a-0171fc6834d7",
                            Email = "Colleen14@yahoo.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("75b74ed7-5a25-48c1-8e81-609eafd5b09a"),
                            LockoutEnabled = false,
                            Name = "Mac Jacobs",
                            NormalizedEmail = "COLLEEN14@YAHOO.COM",
                            NormalizedUserName = "COLLEEN14@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOiEhkYsbPxMEUH1VIApDlJGmEjXkLZDYpG6qNgAcGJ8DM97qc2L3RIYOIDpinCcog==",
                            PhoneNumber = "571-478-2017",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ecd4621-50f1-4893-a425-6b6adcbddb5b",
                            TwoFactorEnabled = false,
                            UserName = "Colleen14@yahoo.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "48479 Moore Flats",
                            ConcurrencyStamp = "451e1e2e-a907-423d-b6eb-5cce271ba90e",
                            Email = "Brycen26@yahoo.com",
                            EmailConfirmed = true,
                            LibraryCardId = new Guid("7e5c6a48-d89b-4d42-a99b-2c3eea90bc05"),
                            LockoutEnabled = false,
                            Name = "Claire Brekke",
                            NormalizedEmail = "BRYCEN26@YAHOO.COM",
                            NormalizedUserName = "BRYCEN26@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELF4FoNC/F+Zoy87DWBMh/sfm8adnHSEMeg+bmLjmPfv4MNvpi/HoaGGyAYz0t1GlA==",
                            PhoneNumber = "1-509-405-6563",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4c2a85d-dc7a-4c11-8493-6f4e231a4a49",
                            TwoFactorEnabled = false,
                            UserName = "Brycen26@yahoo.com"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.BorrowingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("LibraryItemId");

                    b.ToTable("BorrowingHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BorrowDate = new DateTime(2022, 3, 15, 8, 9, 21, 487, DateTimeKind.Local).AddTicks(1588),
                            DueDate = new DateTime(2022, 3, 25, 8, 9, 21, 487, DateTimeKind.Local).AddTicks(1588),
                            LibraryCardId = new Guid("75e786fe-dcc7-4899-ab89-463570c06e48"),
                            LibraryItemId = 6,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            BorrowDate = new DateTime(2022, 2, 16, 20, 23, 21, 433, DateTimeKind.Local).AddTicks(9691),
                            DueDate = new DateTime(2022, 3, 16, 20, 23, 21, 433, DateTimeKind.Local).AddTicks(9691),
                            LibraryCardId = new Guid("52db1c36-52f0-440e-98f4-db9974e723cc"),
                            LibraryItemId = 33,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 3,
                            BorrowDate = new DateTime(2021, 2, 23, 15, 55, 45, 16, DateTimeKind.Local).AddTicks(7446),
                            DueDate = new DateTime(2021, 3, 9, 15, 55, 45, 16, DateTimeKind.Local).AddTicks(7446),
                            LibraryCardId = new Guid("08fb96d4-e236-40ea-aac3-6ba468e9ef0f"),
                            LibraryItemId = 21,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 4,
                            BorrowDate = new DateTime(2022, 3, 14, 11, 22, 58, 549, DateTimeKind.Local).AddTicks(3496),
                            DueDate = new DateTime(2022, 3, 30, 11, 22, 58, 549, DateTimeKind.Local).AddTicks(3496),
                            LibraryCardId = new Guid("a7979d46-e381-4e03-8d8c-de9e5d6b5493"),
                            LibraryItemId = 21,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            BorrowDate = new DateTime(2022, 10, 7, 2, 55, 55, 749, DateTimeKind.Local).AddTicks(6748),
                            DueDate = new DateTime(2022, 10, 24, 2, 55, 55, 749, DateTimeKind.Local).AddTicks(6748),
                            LibraryCardId = new Guid("51a9193e-bab3-4470-b4e0-cb58e064be55"),
                            LibraryItemId = 10,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            BorrowDate = new DateTime(2022, 11, 3, 2, 55, 55, 749, DateTimeKind.Local).AddTicks(6748),
                            DueDate = new DateTime(2022, 11, 16, 2, 55, 55, 749, DateTimeKind.Local).AddTicks(6748),
                            LibraryCardId = new Guid("9a16aeaf-c0db-48c7-a4c9-af7148904620"),
                            LibraryItemId = 11,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            BorrowDate = new DateTime(2022, 3, 25, 8, 9, 21, 487, DateTimeKind.Local).AddTicks(1588),
                            DueDate = new DateTime(2022, 4, 15, 8, 9, 21, 487, DateTimeKind.Local).AddTicks(1588),
                            LibraryCardId = new Guid("35a6209f-3f8f-446b-8ce4-09e2b718666d"),
                            LibraryItemId = 33,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 8,
                            BorrowDate = new DateTime(2021, 5, 6, 11, 18, 20, 900, DateTimeKind.Local).AddTicks(9897),
                            DueDate = new DateTime(2021, 5, 17, 11, 18, 20, 900, DateTimeKind.Local).AddTicks(9897),
                            LibraryCardId = new Guid("dbbd9b3f-9c8f-491c-88fc-59a8f7bb782f"),
                            LibraryItemId = 19,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 9,
                            BorrowDate = new DateTime(2021, 1, 14, 0, 29, 2, 284, DateTimeKind.Local).AddTicks(7173),
                            DueDate = new DateTime(2021, 2, 5, 0, 29, 2, 284, DateTimeKind.Local).AddTicks(7173),
                            LibraryCardId = new Guid("35a6209f-3f8f-446b-8ce4-09e2b718666d"),
                            LibraryItemId = 17,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 10,
                            BorrowDate = new DateTime(2022, 1, 23, 16, 58, 34, 332, DateTimeKind.Local).AddTicks(9387),
                            DueDate = new DateTime(2022, 2, 11, 16, 58, 34, 332, DateTimeKind.Local).AddTicks(9387),
                            LibraryCardId = new Guid("606698ff-4b14-4fca-be38-b14372aff76a"),
                            LibraryItemId = 33,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            BorrowDate = new DateTime(2022, 8, 4, 17, 18, 2, 249, DateTimeKind.Local).AddTicks(3616),
                            DueDate = new DateTime(2022, 8, 22, 17, 18, 2, 249, DateTimeKind.Local).AddTicks(3616),
                            LibraryCardId = new Guid("a7979d46-e381-4e03-8d8c-de9e5d6b5493"),
                            LibraryItemId = 16,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 12,
                            BorrowDate = new DateTime(2022, 12, 24, 0, 4, 15, 672, DateTimeKind.Local).AddTicks(3828),
                            DueDate = new DateTime(2023, 1, 6, 0, 4, 15, 672, DateTimeKind.Local).AddTicks(3828),
                            LibraryCardId = new Guid("7e5c6a48-d89b-4d42-a99b-2c3eea90bc05"),
                            LibraryItemId = 34,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            BorrowDate = new DateTime(2021, 7, 14, 12, 45, 53, 372, DateTimeKind.Local).AddTicks(8777),
                            DueDate = new DateTime(2021, 8, 4, 12, 45, 53, 372, DateTimeKind.Local).AddTicks(8777),
                            LibraryCardId = new Guid("52db1c36-52f0-440e-98f4-db9974e723cc"),
                            LibraryItemId = 12,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            BorrowDate = new DateTime(2021, 1, 25, 7, 45, 48, 119, DateTimeKind.Local).AddTicks(289),
                            DueDate = new DateTime(2021, 2, 21, 7, 45, 48, 119, DateTimeKind.Local).AddTicks(289),
                            LibraryCardId = new Guid("51a9193e-bab3-4470-b4e0-cb58e064be55"),
                            LibraryItemId = 7,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            BorrowDate = new DateTime(2022, 2, 8, 16, 58, 34, 332, DateTimeKind.Local).AddTicks(9387),
                            DueDate = new DateTime(2022, 2, 26, 16, 58, 34, 332, DateTimeKind.Local).AddTicks(9387),
                            LibraryCardId = new Guid("52db1c36-52f0-440e-98f4-db9974e723cc"),
                            LibraryItemId = 3,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 16,
                            BorrowDate = new DateTime(2022, 8, 2, 0, 20, 56, 283, DateTimeKind.Local).AddTicks(8119),
                            DueDate = new DateTime(2022, 8, 19, 0, 20, 56, 283, DateTimeKind.Local).AddTicks(8119),
                            LibraryCardId = new Guid("75e786fe-dcc7-4899-ab89-463570c06e48"),
                            LibraryItemId = 32,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 17,
                            BorrowDate = new DateTime(2022, 3, 30, 11, 22, 58, 549, DateTimeKind.Local).AddTicks(3496),
                            DueDate = new DateTime(2022, 4, 10, 11, 22, 58, 549, DateTimeKind.Local).AddTicks(3496),
                            LibraryCardId = new Guid("c83e6913-2d58-4c8f-971f-2fda26b6b8e9"),
                            LibraryItemId = 40,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 18,
                            BorrowDate = new DateTime(2021, 7, 27, 12, 45, 53, 372, DateTimeKind.Local).AddTicks(8777),
                            DueDate = new DateTime(2021, 8, 16, 12, 45, 53, 372, DateTimeKind.Local).AddTicks(8777),
                            LibraryCardId = new Guid("a02e8fc9-d75d-4e64-8c9b-94720fe25f69"),
                            LibraryItemId = 6,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            BorrowDate = new DateTime(2022, 7, 15, 17, 18, 2, 249, DateTimeKind.Local).AddTicks(3616),
                            DueDate = new DateTime(2022, 8, 12, 17, 18, 2, 249, DateTimeKind.Local).AddTicks(3616),
                            LibraryCardId = new Guid("a02e8fc9-d75d-4e64-8c9b-94720fe25f69"),
                            LibraryItemId = 27,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            BorrowDate = new DateTime(2021, 12, 6, 13, 57, 53, 67, DateTimeKind.Local).AddTicks(4528),
                            DueDate = new DateTime(2021, 12, 23, 13, 57, 53, 67, DateTimeKind.Local).AddTicks(4528),
                            LibraryCardId = new Guid("35a6209f-3f8f-446b-8ce4-09e2b718666d"),
                            LibraryItemId = 36,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 21,
                            BorrowDate = new DateTime(2022, 5, 22, 20, 31, 8, 486, DateTimeKind.Local).AddTicks(3151),
                            DueDate = new DateTime(2022, 6, 7, 20, 31, 8, 486, DateTimeKind.Local).AddTicks(3151),
                            LibraryCardId = new Guid("a02e8fc9-d75d-4e64-8c9b-94720fe25f69"),
                            LibraryItemId = 12,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            BorrowDate = new DateTime(2021, 1, 19, 0, 29, 2, 284, DateTimeKind.Local).AddTicks(7173),
                            DueDate = new DateTime(2021, 2, 11, 0, 29, 2, 284, DateTimeKind.Local).AddTicks(7173),
                            LibraryCardId = new Guid("a02e8fc9-d75d-4e64-8c9b-94720fe25f69"),
                            LibraryItemId = 5,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 23,
                            BorrowDate = new DateTime(2021, 10, 19, 15, 57, 19, 914, DateTimeKind.Local).AddTicks(3183),
                            DueDate = new DateTime(2021, 11, 5, 15, 57, 19, 914, DateTimeKind.Local).AddTicks(3183),
                            LibraryCardId = new Guid("16e4ad6b-e6f7-417a-a9f1-c102e17a1767"),
                            LibraryItemId = 17,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 24,
                            BorrowDate = new DateTime(2021, 9, 18, 12, 28, 48, 1, DateTimeKind.Local).AddTicks(8346),
                            DueDate = new DateTime(2021, 10, 12, 12, 28, 48, 1, DateTimeKind.Local).AddTicks(8346),
                            LibraryCardId = new Guid("606698ff-4b14-4fca-be38-b14372aff76a"),
                            LibraryItemId = 23,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 25,
                            BorrowDate = new DateTime(2022, 5, 27, 20, 59, 31, 904, DateTimeKind.Local).AddTicks(2298),
                            DueDate = new DateTime(2022, 6, 21, 20, 59, 31, 904, DateTimeKind.Local).AddTicks(2298),
                            LibraryCardId = new Guid("35a6209f-3f8f-446b-8ce4-09e2b718666d"),
                            LibraryItemId = 16,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.LibraryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LibraryItems");

                    b.HasDiscriminator<string>("ItemType").HasValue("LibraryItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryMVC.Entity.Book", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Derick Roob",
                            PublicationDate = new DateTime(2022, 8, 15, 2, 55, 55, 749, DateTimeKind.Local).AddTicks(6748),
                            Quantity = 5,
                            Title = "Non nemo et quasi.",
                            NumberOfPages = 99
                        },
                        new
                        {
                            Id = 4,
                            Author = "Adella Ratke",
                            PublicationDate = new DateTime(2020, 12, 15, 3, 18, 40, 609, DateTimeKind.Local).AddTicks(8442),
                            Quantity = 5,
                            Title = "Iure magnam adipisci fugit.",
                            NumberOfPages = 84
                        },
                        new
                        {
                            Id = 6,
                            Author = "Mack Zieme",
                            PublicationDate = new DateTime(2022, 5, 23, 23, 42, 52, 984, DateTimeKind.Local).AddTicks(4690),
                            Quantity = 8,
                            Title = "Possimus rerum doloribus est.",
                            NumberOfPages = 108
                        },
                        new
                        {
                            Id = 7,
                            Author = "Houston Glover",
                            PublicationDate = new DateTime(2021, 11, 16, 0, 50, 5, 403, DateTimeKind.Local).AddTicks(9421),
                            Quantity = 10,
                            Title = "Cum placeat non dignissimos.",
                            NumberOfPages = 57
                        },
                        new
                        {
                            Id = 14,
                            Author = "Eula Heaney",
                            PublicationDate = new DateTime(2021, 9, 26, 1, 34, 22, 217, DateTimeKind.Local).AddTicks(9948),
                            Quantity = 8,
                            Title = "Porro quae fuga aut.",
                            NumberOfPages = 98
                        },
                        new
                        {
                            Id = 15,
                            Author = "Travon Streich",
                            PublicationDate = new DateTime(2022, 6, 15, 16, 8, 49, 550, DateTimeKind.Local).AddTicks(1454),
                            Quantity = 5,
                            Title = "Nihil est aut et.",
                            NumberOfPages = 96
                        },
                        new
                        {
                            Id = 16,
                            Author = "Jailyn Swift",
                            PublicationDate = new DateTime(2021, 11, 13, 21, 49, 26, 731, DateTimeKind.Local).AddTicks(9230),
                            Quantity = 7,
                            Title = "Repudiandae quam asperiores qui.",
                            NumberOfPages = 79
                        },
                        new
                        {
                            Id = 17,
                            Author = "Frederik Schoen",
                            PublicationDate = new DateTime(2022, 8, 6, 7, 11, 57, 875, DateTimeKind.Local).AddTicks(7948),
                            Quantity = 10,
                            Title = "Ea enim rerum officia.",
                            NumberOfPages = 63
                        },
                        new
                        {
                            Id = 22,
                            Author = "Sherwood McKenzie",
                            PublicationDate = new DateTime(2022, 5, 6, 17, 18, 2, 249, DateTimeKind.Local).AddTicks(3616),
                            Quantity = 7,
                            Title = "Molestiae quia quia quia.",
                            NumberOfPages = 134
                        },
                        new
                        {
                            Id = 26,
                            Author = "Amaya MacGyver",
                            PublicationDate = new DateTime(2021, 11, 1, 16, 58, 34, 332, DateTimeKind.Local).AddTicks(9387),
                            Quantity = 7,
                            Title = "Similique ullam minima nisi.",
                            NumberOfPages = 86
                        },
                        new
                        {
                            Id = 30,
                            Author = "Joanne Schoen",
                            PublicationDate = new DateTime(2022, 7, 8, 2, 15, 10, 428, DateTimeKind.Local).AddTicks(6050),
                            Quantity = 9,
                            Title = "Impedit ad dolorem vel.",
                            NumberOfPages = 123
                        },
                        new
                        {
                            Id = 31,
                            Author = "Ova Spinka",
                            PublicationDate = new DateTime(2022, 8, 16, 1, 9, 53, 780, DateTimeKind.Local).AddTicks(5843),
                            Quantity = 8,
                            Title = "Illum et alias perferendis.",
                            NumberOfPages = 124
                        },
                        new
                        {
                            Id = 37,
                            Author = "Dulce Kessler",
                            PublicationDate = new DateTime(2020, 12, 2, 7, 45, 48, 119, DateTimeKind.Local).AddTicks(289),
                            Quantity = 6,
                            Title = "Minus sequi illum qui.",
                            NumberOfPages = 124
                        },
                        new
                        {
                            Id = 40,
                            Author = "Payton Jakubowski",
                            PublicationDate = new DateTime(2020, 12, 16, 11, 28, 17, 81, DateTimeKind.Local).AddTicks(1797),
                            Quantity = 9,
                            Title = "Rerum quia laboriosam aut.",
                            NumberOfPages = 121
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.Dvd", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.Property<string>("Runtime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DVD");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Author = "Barton Denesik",
                            PublicationDate = new DateTime(2021, 7, 22, 2, 44, 46, 593, DateTimeKind.Local).AddTicks(395),
                            Quantity = 8,
                            Title = "Accusantium voluptas similique maxime.",
                            Runtime = "86"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Kim Nolan",
                            PublicationDate = new DateTime(2021, 3, 4, 12, 2, 11, 815, DateTimeKind.Local).AddTicks(8101),
                            Quantity = 5,
                            Title = "Aut officia culpa qui.",
                            Runtime = "98"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Trinity Wintheiser",
                            PublicationDate = new DateTime(2021, 2, 7, 6, 55, 40, 210, DateTimeKind.Local).AddTicks(8322),
                            Quantity = 9,
                            Title = "Eum voluptas maiores molestiae.",
                            Runtime = "134"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Tod Durgan",
                            PublicationDate = new DateTime(2021, 2, 26, 20, 9, 46, 374, DateTimeKind.Local).AddTicks(1883),
                            Quantity = 8,
                            Title = "Voluptatibus possimus culpa possimus.",
                            Runtime = "108"
                        },
                        new
                        {
                            Id = 13,
                            Author = "May Quitzon",
                            PublicationDate = new DateTime(2022, 2, 20, 20, 59, 31, 904, DateTimeKind.Local).AddTicks(2298),
                            Quantity = 8,
                            Title = "Reprehenderit necessitatibus ipsam vero.",
                            Runtime = "129"
                        },
                        new
                        {
                            Id = 19,
                            Author = "Madge Morar",
                            PublicationDate = new DateTime(2021, 9, 4, 5, 28, 1, 749, DateTimeKind.Local).AddTicks(5653),
                            Quantity = 5,
                            Title = "Modi accusamus aut et.",
                            Runtime = "125"
                        },
                        new
                        {
                            Id = 21,
                            Author = "Devin Stokes",
                            PublicationDate = new DateTime(2022, 2, 24, 20, 31, 8, 486, DateTimeKind.Local).AddTicks(3151),
                            Quantity = 9,
                            Title = "Temporibus consequatur est necessitatibus.",
                            Runtime = "141"
                        },
                        new
                        {
                            Id = 24,
                            Author = "Sidney Renner",
                            PublicationDate = new DateTime(2022, 1, 3, 11, 22, 58, 549, DateTimeKind.Local).AddTicks(3496),
                            Quantity = 10,
                            Title = "Aliquam reiciendis ipsa molestiae.",
                            Runtime = "90"
                        },
                        new
                        {
                            Id = 35,
                            Author = "Jaleel Sauer",
                            PublicationDate = new DateTime(2021, 10, 6, 13, 57, 53, 67, DateTimeKind.Local).AddTicks(4528),
                            Quantity = 5,
                            Title = "Ipsum et autem ea.",
                            Runtime = "75"
                        },
                        new
                        {
                            Id = 38,
                            Author = "Gerda Abshire",
                            PublicationDate = new DateTime(2021, 11, 12, 20, 23, 21, 433, DateTimeKind.Local).AddTicks(9691),
                            Quantity = 9,
                            Title = "Molestiae cum accusantium voluptatibus.",
                            Runtime = "136"
                        },
                        new
                        {
                            Id = 39,
                            Author = "Kitty Gerhold",
                            PublicationDate = new DateTime(2022, 6, 12, 14, 51, 46, 39, DateTimeKind.Local).AddTicks(3920),
                            Quantity = 9,
                            Title = "Tempora rerum in quia.",
                            Runtime = "125"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.Magazine", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.HasDiscriminator().HasValue("Magazine");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Author = "Nikki Aufderhar",
                            PublicationDate = new DateTime(2021, 9, 21, 2, 58, 7, 942, DateTimeKind.Local).AddTicks(9671),
                            Quantity = 8,
                            Title = "Exercitationem quam repellat nulla."
                        },
                        new
                        {
                            Id = 10,
                            Author = "Ardella Kunde",
                            PublicationDate = new DateTime(2021, 2, 1, 11, 18, 20, 900, DateTimeKind.Local).AddTicks(9897),
                            Quantity = 9,
                            Title = "Incidunt ea blanditiis voluptate."
                        },
                        new
                        {
                            Id = 11,
                            Author = "Geo Mayert",
                            PublicationDate = new DateTime(2022, 9, 29, 0, 4, 15, 672, DateTimeKind.Local).AddTicks(3828),
                            Quantity = 7,
                            Title = "Molestiae quia ut maxime."
                        },
                        new
                        {
                            Id = 12,
                            Author = "Sanford Little",
                            PublicationDate = new DateTime(2022, 3, 11, 10, 8, 55, 919, DateTimeKind.Local).AddTicks(7571),
                            Quantity = 9,
                            Title = "Possimus nisi deleniti eos."
                        },
                        new
                        {
                            Id = 18,
                            Author = "Leda Ankunding",
                            PublicationDate = new DateTime(2022, 3, 19, 20, 0, 0, 11, DateTimeKind.Local).AddTicks(8555),
                            Quantity = 10,
                            Title = "Qui quod nemo soluta."
                        },
                        new
                        {
                            Id = 20,
                            Author = "Adonis Crooks",
                            PublicationDate = new DateTime(2021, 12, 18, 9, 50, 32, 92, DateTimeKind.Local).AddTicks(9563),
                            Quantity = 5,
                            Title = "Consequuntur est fugit ut."
                        },
                        new
                        {
                            Id = 23,
                            Author = "Jodie Hahn",
                            PublicationDate = new DateTime(2020, 11, 11, 0, 29, 2, 284, DateTimeKind.Local).AddTicks(7173),
                            Quantity = 5,
                            Title = "Et in architecto perferendis."
                        },
                        new
                        {
                            Id = 25,
                            Author = "Nicola Gorczany",
                            PublicationDate = new DateTime(2021, 7, 28, 7, 25, 50, 952, DateTimeKind.Local).AddTicks(8219),
                            Quantity = 10,
                            Title = "Vitae qui itaque debitis."
                        },
                        new
                        {
                            Id = 27,
                            Author = "Annalise Skiles",
                            PublicationDate = new DateTime(2021, 8, 18, 15, 57, 19, 914, DateTimeKind.Local).AddTicks(3183),
                            Quantity = 10,
                            Title = "Quo distinctio sint dolorem."
                        },
                        new
                        {
                            Id = 28,
                            Author = "Amos Volkman",
                            PublicationDate = new DateTime(2021, 4, 24, 12, 45, 53, 372, DateTimeKind.Local).AddTicks(8777),
                            Quantity = 8,
                            Title = "Totam unde incidunt delectus."
                        },
                        new
                        {
                            Id = 29,
                            Author = "Lavern Grant",
                            PublicationDate = new DateTime(2020, 12, 1, 4, 53, 50, 891, DateTimeKind.Local).AddTicks(7116),
                            Quantity = 10,
                            Title = "Molestiae hic voluptatem reprehenderit."
                        },
                        new
                        {
                            Id = 32,
                            Author = "Bonita Green",
                            PublicationDate = new DateTime(2020, 12, 6, 15, 55, 45, 16, DateTimeKind.Local).AddTicks(7446),
                            Quantity = 7,
                            Title = "Quia et est tenetur."
                        },
                        new
                        {
                            Id = 33,
                            Author = "Helena Durgan",
                            PublicationDate = new DateTime(2022, 4, 29, 0, 20, 56, 283, DateTimeKind.Local).AddTicks(8119),
                            Quantity = 5,
                            Title = "Mollitia expedita aperiam minus."
                        },
                        new
                        {
                            Id = 34,
                            Author = "Derek Klein",
                            PublicationDate = new DateTime(2021, 12, 23, 8, 9, 21, 487, DateTimeKind.Local).AddTicks(1588),
                            Quantity = 6,
                            Title = "Iure voluptatibus iste quo."
                        },
                        new
                        {
                            Id = 36,
                            Author = "Sydney West",
                            PublicationDate = new DateTime(2021, 7, 14, 12, 28, 48, 1, DateTimeKind.Local).AddTicks(8346),
                            Quantity = 9,
                            Title = "Cum non aliquid rerum."
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.BorrowingHistory", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", "Borrower")
                        .WithMany("BorrowingHistories")
                        .HasForeignKey("LibraryCardId")
                        .HasPrincipalKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entity.LibraryItem", "LibraryItem")
                        .WithMany("BorrowingHistories")
                        .HasForeignKey("LibraryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryMVC.Entity.Borrower", b =>
                {
                    b.Navigation("BorrowingHistories");
                });

            modelBuilder.Entity("LibraryMVC.Entity.LibraryItem", b =>
                {
                    b.Navigation("BorrowingHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
