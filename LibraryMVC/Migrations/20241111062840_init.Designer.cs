// <auto-generated />
using System;
using LibraryMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryMVC.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20241111062840_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryMVC.Entity.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Admin Address",
                            ConcurrencyStamp = "ca21b70a-ad86-4817-9353-03077082ba81",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLjGE4k34aMXmpbxAzZTESPfIThfZodOmoHCGU95zYDOwoiNE1VNTUTa9I1l/4vyQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20659c7a-57d6-4f96-86b0-ba1094199c05",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "03284 Colby Expressway",
                            ConcurrencyStamp = "3eaa370f-2339-4d04-8753-d8037281fdc1",
                            Email = "Allan.Hamill9@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rickey Moore",
                            NormalizedEmail = "ALLAN.HAMILL9@HOTMAIL.COM",
                            NormalizedUserName = "ALLAN.HAMILL9@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDukAucBN2tVWXwm/jYmXp3Da2g/1nU4bSXezRYPZxDzmiYsfO/ozzA3gXkMdYocVQ==",
                            PhoneNumber = "713.622.8794 x7162",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9da1f1ee-4286-4792-bad8-8e2dbc63767d",
                            TwoFactorEnabled = false,
                            UserName = "Allan.Hamill9@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "981 Torp Alley",
                            ConcurrencyStamp = "52ec81a6-228e-4175-9017-ce3d0fa033d8",
                            Email = "Keagan42@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tristin Hartmann",
                            NormalizedEmail = "KEAGAN42@GMAIL.COM",
                            NormalizedUserName = "KEAGAN42@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9dVR9l/oCPv9WloyZquDCwbmFjSwQRb/OjuVFkjfIcrKcJonj9aIA1ffzc4D5zXQ==",
                            PhoneNumber = "(753) 753-3076 x82543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb7c3f6f-872d-40b2-b820-6d7783439d9c",
                            TwoFactorEnabled = false,
                            UserName = "Keagan42@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "656 Gunner Light",
                            ConcurrencyStamp = "f0b0d275-fc4d-40e0-be9e-29d07f0a3bda",
                            Email = "Horace_Donnelly@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Talia Walker",
                            NormalizedEmail = "HORACE_DONNELLY@YAHOO.COM",
                            NormalizedUserName = "HORACE_DONNELLY@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2hlXAxySyyEsa/hZw9/H0muy0/iHYRKipom8bKUd7mv4eaqnRoRinZoGUD7sW0pg==",
                            PhoneNumber = "456.388.3190",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fa4b1a7-0403-49c9-8754-a103fcfbb2c8",
                            TwoFactorEnabled = false,
                            UserName = "Horace_Donnelly@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "37629 Brielle Expressway",
                            ConcurrencyStamp = "c529f933-0dc3-4f98-bb4c-607e2bbad48f",
                            Email = "Krista4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Berta Collier",
                            NormalizedEmail = "KRISTA4@GMAIL.COM",
                            NormalizedUserName = "KRISTA4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBkrpiBbYXvjlxUrR0y2jEa6+BSoThq+x1TeJYEHKmdz4o/8hw2m+rnNAvgthH1wSg==",
                            PhoneNumber = "1-590-731-8839",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbf6b418-3450-4e7d-9e6e-c7a3e113692c",
                            TwoFactorEnabled = false,
                            UserName = "Krista4@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "6103 Aurelie Isle",
                            ConcurrencyStamp = "4e82b16d-331b-4276-b03f-4e9b217b7273",
                            Email = "Kaycee.Buckridge56@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jamar Wiegand",
                            NormalizedEmail = "KAYCEE.BUCKRIDGE56@GMAIL.COM",
                            NormalizedUserName = "KAYCEE.BUCKRIDGE56@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBSG44RWW0WjTQzJL4CrhSzGUF1ZS7SseveNnlMmx+JmD7lSOgSQlTIipqfl5bSf0A==",
                            PhoneNumber = "(500) 592-1983 x3240",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad3474a3-832b-4a9c-9d45-b9ad5a628368",
                            TwoFactorEnabled = false,
                            UserName = "Kaycee.Buckridge56@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "49588 Jeffery Causeway",
                            ConcurrencyStamp = "bc87ab49-bd62-428b-9a22-bfe9fb8ef921",
                            Email = "Johan4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Immanuel Mitchell",
                            NormalizedEmail = "JOHAN4@GMAIL.COM",
                            NormalizedUserName = "JOHAN4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMsoTD4sBwFVZuA3nfNdJXVGR28RHDmLx66+smIK+PjPRo+WfQx+NfrfgpajZyNYbg==",
                            PhoneNumber = "1-961-276-4539 x208",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db5b1a34-df8f-4611-940d-ba0a93a6a968",
                            TwoFactorEnabled = false,
                            UserName = "Johan4@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "7527 Dorthy Garden",
                            ConcurrencyStamp = "41cb175f-7fb1-47ab-afe1-b0ac555a252a",
                            Email = "Ashtyn.Tremblay39@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jodie Waters",
                            NormalizedEmail = "ASHTYN.TREMBLAY39@HOTMAIL.COM",
                            NormalizedUserName = "ASHTYN.TREMBLAY39@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcO+/U+9CKcrH+J0tQRsEnZrQ0qMEhykexFpXidhAwOnAzlV2Rhp9irJsy9gjBdnw==",
                            PhoneNumber = "1-765-374-7435 x4265",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1611f085-2ede-473f-9ff8-062f003f3158",
                            TwoFactorEnabled = false,
                            UserName = "Ashtyn.Tremblay39@hotmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "62350 Allie Inlet",
                            ConcurrencyStamp = "3563a1a4-0d19-445f-8b49-e9b58922b2cd",
                            Email = "Beth28@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Cindy Mitchell",
                            NormalizedEmail = "BETH28@HOTMAIL.COM",
                            NormalizedUserName = "BETH28@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDp+3dNLxEgtxCcGSVfOYo1dOd/ve3GdegGJb0X30JkUxFMJWyjx3tpRETEjN5m9Og==",
                            PhoneNumber = "(758) 939-4746 x32963",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb9d3d7f-e411-4622-8045-02000c698865",
                            TwoFactorEnabled = false,
                            UserName = "Beth28@hotmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "92193 Mertz Underpass",
                            ConcurrencyStamp = "edc77c1f-ec75-4e99-96c3-35d55ba8f4d0",
                            Email = "Nadia.Schmidt58@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Oceane Schuppe",
                            NormalizedEmail = "NADIA.SCHMIDT58@GMAIL.COM",
                            NormalizedUserName = "NADIA.SCHMIDT58@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPHEQrZJfS3Iug191q6KAatiFHImS5gKpIyGmrC7rYprZh7Y6PI8VpErF+y5MLh7XA==",
                            PhoneNumber = "1-401-880-8149 x2534",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "977e593c-b68e-4033-b413-f903fdaf4d09",
                            TwoFactorEnabled = false,
                            UserName = "Nadia.Schmidt58@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "440 Kling Junctions",
                            ConcurrencyStamp = "7556f125-e33f-433e-89e9-63c793bb5548",
                            Email = "Oran.Abbott@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rudy Thiel",
                            NormalizedEmail = "ORAN.ABBOTT@YAHOO.COM",
                            NormalizedUserName = "ORAN.ABBOTT@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKEVgWYCsFtaE3vnGlwnJGNFMX4GSBzN2NE5SSvNlgYamAqlbKlKS6VMmSVkOlWcHA==",
                            PhoneNumber = "599-632-5308 x0853",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da923f6f-beca-4b5d-b2f7-24f9d9c4840d",
                            TwoFactorEnabled = false,
                            UserName = "Oran.Abbott@yahoo.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "662 Medhurst Inlet",
                            ConcurrencyStamp = "d2d5d455-b614-4103-922f-351e685fa53e",
                            Email = "Jordane82@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Johnnie Dare",
                            NormalizedEmail = "JORDANE82@YAHOO.COM",
                            NormalizedUserName = "JORDANE82@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdSqIGdePkfeo3VAk2RWi9/NWZAwviYmJA+/1aBMPmyONSkeUJt3ImQyC/rEgxnFw==",
                            PhoneNumber = "914.377.0483 x60823",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e12b3eb-f0c4-4a68-a022-cd9940b09d15",
                            TwoFactorEnabled = false,
                            UserName = "Jordane82@yahoo.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "9435 Meredith Extension",
                            ConcurrencyStamp = "07ce447f-5210-4fbb-a81f-fe0e3b2f7481",
                            Email = "Simone10@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Vladimir Bruen",
                            NormalizedEmail = "SIMONE10@HOTMAIL.COM",
                            NormalizedUserName = "SIMONE10@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEbaCFatHcF8nwYpNofGgaYTZWb4jiUtuzXAy12Pbg3sRYMKn556RTzKCQCFPwgAw==",
                            PhoneNumber = "804.263.6115 x13404",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1b2b22c-834f-4c06-a6f3-982811c0f48a",
                            TwoFactorEnabled = false,
                            UserName = "Simone10@hotmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "180 Ondricka Corner",
                            ConcurrencyStamp = "78f80ccf-bf6f-4a4b-9b20-8affef81ba8b",
                            Email = "Adah_Will@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Shana Block",
                            NormalizedEmail = "ADAH_WILL@GMAIL.COM",
                            NormalizedUserName = "ADAH_WILL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1roRzU8jOQA8zbWVVBv1CHKcH/WDiLYF0fFR51lRQZXxo01O+OTSuStyZkc4NlHQ==",
                            PhoneNumber = "(232) 233-5168",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f20fc6a5-07b9-47e3-84a9-377aa7c1e3db",
                            TwoFactorEnabled = false,
                            UserName = "Adah_Will@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "5905 O'Hara Mountain",
                            ConcurrencyStamp = "ff3d04c0-fab6-4ac4-8b09-4e6422a9ab8f",
                            Email = "Darian.Bednar68@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Eveline Bradtke",
                            NormalizedEmail = "DARIAN.BEDNAR68@GMAIL.COM",
                            NormalizedUserName = "DARIAN.BEDNAR68@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4fz/RK2IvahgEFpqPFOLVZdceMPpsbPNvDwKnBItuVBJHm+YwtAMXAFPzNXpOPUQ==",
                            PhoneNumber = "1-615-466-7684 x92491",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54921fbc-6014-49e8-a800-670bc5886f94",
                            TwoFactorEnabled = false,
                            UserName = "Darian.Bednar68@gmail.com"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "39530 Adan Mills",
                            ConcurrencyStamp = "4685eaa9-57cf-4e77-bb12-9c8f9db30871",
                            Email = "Marcelino.Koch84@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leon Swift",
                            NormalizedEmail = "MARCELINO.KOCH84@YAHOO.COM",
                            NormalizedUserName = "MARCELINO.KOCH84@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG8ZBUpij/MehuZIl0y6er3SYkBfkqQBjyNXsk2zocG6IohmaWCJW9hEd/auFVwcdQ==",
                            PhoneNumber = "988.706.8383 x875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4edbc4a-c500-460c-89cc-b85b6fa4c3c2",
                            TwoFactorEnabled = false,
                            UserName = "Marcelino.Koch84@yahoo.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "59515 Rigoberto Island",
                            ConcurrencyStamp = "c13ecf55-cdd0-4a56-a8cb-4fad7d421813",
                            Email = "Helene_Kohler@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bernard Weimann",
                            NormalizedEmail = "HELENE_KOHLER@GMAIL.COM",
                            NormalizedUserName = "HELENE_KOHLER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqnKqBwAwuEYUELOSLCyzS9J6qyeigLq/wgYvnQ2iugW+TuWizkekX7X3+ZsOIdng==",
                            PhoneNumber = "951.356.8368 x1175",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a8d0f15-aecd-4092-8e23-12a46fbdd1ba",
                            TwoFactorEnabled = false,
                            UserName = "Helene_Kohler@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "822 Roob Stream",
                            ConcurrencyStamp = "3dd6c573-fdfd-4508-957c-6ed997a57186",
                            Email = "Hubert51@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jaden McLaughlin",
                            NormalizedEmail = "HUBERT51@GMAIL.COM",
                            NormalizedUserName = "HUBERT51@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEADl+mGimBp0Ld/ut/WEncGt5smJ4VD9/jVev2REF4L+uEx8e784s8lX3kwHp58urQ==",
                            PhoneNumber = "563.732.3271",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fce0cb92-fa1c-4de2-97b2-eaa0ede13301",
                            TwoFactorEnabled = false,
                            UserName = "Hubert51@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "6850 Vita Prairie",
                            ConcurrencyStamp = "a032cf93-5a7f-40ed-ae58-3336455f1817",
                            Email = "Ali.Parisian35@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Marisol O'Conner",
                            NormalizedEmail = "ALI.PARISIAN35@HOTMAIL.COM",
                            NormalizedUserName = "ALI.PARISIAN35@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdo62K2xA4JlJA245lKQYHRzqzhbj4SWRymv5pfpMkb9LlGvE5Z3+KFAbUvwPaHeA==",
                            PhoneNumber = "620-461-0211",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1733e39-5e85-47f6-8455-0319a4105619",
                            TwoFactorEnabled = false,
                            UserName = "Ali.Parisian35@hotmail.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "25327 Steuber Tunnel",
                            ConcurrencyStamp = "52ac2269-85b4-4065-8f7c-fde406d0d1cb",
                            Email = "Alene.Reinger6@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Brendon Howell",
                            NormalizedEmail = "ALENE.REINGER6@YAHOO.COM",
                            NormalizedUserName = "ALENE.REINGER6@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELzSIiiIvbSKZW/j6eWpWN0GIFUCrxLl37efQ7pWbJtwyVgTBX40MGOLjGvPhVqI6Q==",
                            PhoneNumber = "(336) 327-7278 x5382",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18dfa3ef-1772-4605-b26a-a350e5a6a4d4",
                            TwoFactorEnabled = false,
                            UserName = "Alene.Reinger6@yahoo.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "1935 Macejkovic Parkway",
                            ConcurrencyStamp = "e2d19ac2-4833-4b3a-9eac-caea5d26edff",
                            Email = "Darby.Tremblay@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Raegan Johns",
                            NormalizedEmail = "DARBY.TREMBLAY@GMAIL.COM",
                            NormalizedUserName = "DARBY.TREMBLAY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFLGa1JLzxjfdwNoZQ2oWr3F9AW4duP9q3V+hZzm1rMCclshTcXf7krLcRawjZ3NpQ==",
                            PhoneNumber = "(270) 939-6412 x205",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca7051c2-1412-4e69-82a3-57f5833b99d3",
                            TwoFactorEnabled = false,
                            UserName = "Darby.Tremblay@gmail.com"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.BorrowingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LibraryItemId");

                    b.ToTable("BorrowingHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BorrowDate = new DateTime(2021, 5, 27, 13, 25, 29, 234, DateTimeKind.Local).AddTicks(3815),
                            BorrowerId = 15,
                            DueDate = new DateTime(2021, 6, 6, 13, 25, 29, 234, DateTimeKind.Local).AddTicks(3815),
                            LibraryItemId = 39,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            BorrowDate = new DateTime(2021, 11, 28, 14, 20, 28, 833, DateTimeKind.Local).AddTicks(9266),
                            BorrowerId = 20,
                            DueDate = new DateTime(2021, 12, 13, 14, 20, 28, 833, DateTimeKind.Local).AddTicks(9266),
                            LibraryItemId = 33,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            BorrowDate = new DateTime(2021, 7, 2, 9, 1, 57, 882, DateTimeKind.Local).AddTicks(8912),
                            BorrowerId = 14,
                            DueDate = new DateTime(2021, 7, 17, 9, 1, 57, 882, DateTimeKind.Local).AddTicks(8912),
                            LibraryItemId = 26,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            BorrowDate = new DateTime(2022, 2, 15, 22, 36, 10, 621, DateTimeKind.Local).AddTicks(4504),
                            BorrowerId = 3,
                            DueDate = new DateTime(2022, 2, 28, 22, 36, 10, 621, DateTimeKind.Local).AddTicks(4504),
                            LibraryItemId = 18,
                            Status = 3
                        },
                        new
                        {
                            Id = 5,
                            BorrowDate = new DateTime(2022, 8, 1, 13, 32, 54, 893, DateTimeKind.Local).AddTicks(9084),
                            BorrowerId = 9,
                            DueDate = new DateTime(2022, 8, 13, 13, 32, 54, 893, DateTimeKind.Local).AddTicks(9084),
                            LibraryItemId = 38,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            BorrowDate = new DateTime(2021, 12, 7, 4, 51, 10, 355, DateTimeKind.Local).AddTicks(8755),
                            BorrowerId = 20,
                            DueDate = new DateTime(2021, 12, 25, 4, 51, 10, 355, DateTimeKind.Local).AddTicks(8755),
                            LibraryItemId = 31,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            BorrowDate = new DateTime(2022, 4, 12, 17, 53, 28, 961, DateTimeKind.Local).AddTicks(1814),
                            BorrowerId = 5,
                            DueDate = new DateTime(2022, 5, 4, 17, 53, 28, 961, DateTimeKind.Local).AddTicks(1814),
                            LibraryItemId = 30,
                            Status = 3
                        },
                        new
                        {
                            Id = 8,
                            BorrowDate = new DateTime(2021, 9, 5, 10, 59, 58, 781, DateTimeKind.Local).AddTicks(4340),
                            BorrowerId = 17,
                            DueDate = new DateTime(2021, 10, 3, 10, 59, 58, 781, DateTimeKind.Local).AddTicks(4340),
                            LibraryItemId = 36,
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            BorrowDate = new DateTime(2021, 4, 7, 11, 57, 13, 146, DateTimeKind.Local).AddTicks(1974),
                            BorrowerId = 10,
                            DueDate = new DateTime(2021, 5, 5, 11, 57, 13, 146, DateTimeKind.Local).AddTicks(1974),
                            LibraryItemId = 32,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            BorrowDate = new DateTime(2022, 9, 8, 22, 57, 30, 794, DateTimeKind.Local).AddTicks(5962),
                            BorrowerId = 9,
                            DueDate = new DateTime(2022, 9, 24, 22, 57, 30, 794, DateTimeKind.Local).AddTicks(5962),
                            LibraryItemId = 33,
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            BorrowDate = new DateTime(2021, 12, 24, 7, 12, 14, 884, DateTimeKind.Local).AddTicks(1530),
                            BorrowerId = 2,
                            DueDate = new DateTime(2022, 1, 20, 7, 12, 14, 884, DateTimeKind.Local).AddTicks(1530),
                            LibraryItemId = 32,
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            BorrowDate = new DateTime(2022, 4, 13, 1, 23, 54, 964, DateTimeKind.Local).AddTicks(5552),
                            BorrowerId = 19,
                            DueDate = new DateTime(2022, 4, 24, 1, 23, 54, 964, DateTimeKind.Local).AddTicks(5552),
                            LibraryItemId = 17,
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            BorrowDate = new DateTime(2022, 6, 24, 1, 21, 52, 532, DateTimeKind.Local).AddTicks(763),
                            BorrowerId = 15,
                            DueDate = new DateTime(2022, 7, 7, 1, 21, 52, 532, DateTimeKind.Local).AddTicks(763),
                            LibraryItemId = 27,
                            Status = 2
                        },
                        new
                        {
                            Id = 14,
                            BorrowDate = new DateTime(2022, 4, 3, 22, 59, 30, 999, DateTimeKind.Local).AddTicks(6342),
                            BorrowerId = 19,
                            DueDate = new DateTime(2022, 4, 29, 22, 59, 30, 999, DateTimeKind.Local).AddTicks(6342),
                            LibraryItemId = 33,
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            BorrowDate = new DateTime(2021, 10, 3, 13, 6, 56, 175, DateTimeKind.Local).AddTicks(6185),
                            BorrowerId = 20,
                            DueDate = new DateTime(2021, 10, 19, 13, 6, 56, 175, DateTimeKind.Local).AddTicks(6185),
                            LibraryItemId = 7,
                            Status = 3
                        },
                        new
                        {
                            Id = 16,
                            BorrowDate = new DateTime(2021, 3, 14, 11, 57, 13, 146, DateTimeKind.Local).AddTicks(1974),
                            BorrowerId = 8,
                            DueDate = new DateTime(2021, 3, 28, 11, 57, 13, 146, DateTimeKind.Local).AddTicks(1974),
                            LibraryItemId = 31,
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            BorrowDate = new DateTime(2021, 8, 18, 4, 4, 47, 491, DateTimeKind.Local).AddTicks(2686),
                            BorrowerId = 20,
                            DueDate = new DateTime(2021, 9, 2, 4, 4, 47, 491, DateTimeKind.Local).AddTicks(2686),
                            LibraryItemId = 15,
                            Status = 2
                        },
                        new
                        {
                            Id = 18,
                            BorrowDate = new DateTime(2022, 1, 23, 22, 36, 10, 621, DateTimeKind.Local).AddTicks(4504),
                            BorrowerId = 11,
                            DueDate = new DateTime(2022, 2, 3, 22, 36, 10, 621, DateTimeKind.Local).AddTicks(4504),
                            LibraryItemId = 30,
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            BorrowDate = new DateTime(2022, 6, 30, 19, 11, 27, 699, DateTimeKind.Local).AddTicks(5999),
                            BorrowerId = 3,
                            DueDate = new DateTime(2022, 7, 16, 19, 11, 27, 699, DateTimeKind.Local).AddTicks(5999),
                            LibraryItemId = 26,
                            Status = 2
                        },
                        new
                        {
                            Id = 20,
                            BorrowDate = new DateTime(2022, 9, 10, 22, 57, 30, 794, DateTimeKind.Local).AddTicks(5962),
                            BorrowerId = 21,
                            DueDate = new DateTime(2022, 10, 5, 22, 57, 30, 794, DateTimeKind.Local).AddTicks(5962),
                            LibraryItemId = 33,
                            Status = 0
                        },
                        new
                        {
                            Id = 21,
                            BorrowDate = new DateTime(2021, 1, 31, 10, 31, 5, 835, DateTimeKind.Local).AddTicks(2446),
                            BorrowerId = 3,
                            DueDate = new DateTime(2021, 2, 18, 10, 31, 5, 835, DateTimeKind.Local).AddTicks(2446),
                            LibraryItemId = 5,
                            Status = 0
                        },
                        new
                        {
                            Id = 22,
                            BorrowDate = new DateTime(2022, 8, 28, 13, 32, 54, 893, DateTimeKind.Local).AddTicks(9084),
                            BorrowerId = 2,
                            DueDate = new DateTime(2022, 9, 19, 13, 32, 54, 893, DateTimeKind.Local).AddTicks(9084),
                            LibraryItemId = 39,
                            Status = 3
                        },
                        new
                        {
                            Id = 23,
                            BorrowDate = new DateTime(2021, 10, 15, 13, 6, 56, 175, DateTimeKind.Local).AddTicks(6185),
                            BorrowerId = 19,
                            DueDate = new DateTime(2021, 11, 9, 13, 6, 56, 175, DateTimeKind.Local).AddTicks(6185),
                            LibraryItemId = 28,
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            BorrowDate = new DateTime(2022, 4, 28, 1, 23, 54, 964, DateTimeKind.Local).AddTicks(5552),
                            BorrowerId = 11,
                            DueDate = new DateTime(2022, 5, 10, 1, 23, 54, 964, DateTimeKind.Local).AddTicks(5552),
                            LibraryItemId = 13,
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            BorrowDate = new DateTime(2022, 10, 26, 17, 6, 17, 33, DateTimeKind.Local).AddTicks(1108),
                            BorrowerId = 11,
                            DueDate = new DateTime(2022, 11, 23, 17, 6, 17, 33, DateTimeKind.Local).AddTicks(1108),
                            LibraryItemId = 15,
                            Status = 1
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.LibraryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LibraryItems");

                    b.HasDiscriminator<string>("ItemType").HasValue("LibraryItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryMVC.Entity.Book", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Book");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Author = "Margret O'Keefe",
                            PublicationDate = new DateTime(2021, 10, 4, 14, 20, 28, 833, DateTimeKind.Local).AddTicks(9266),
                            Quantity = 9,
                            Title = "Saepe et nam error.",
                            NumberOfPages = 136
                        },
                        new
                        {
                            Id = 7,
                            Author = "Raul Runte",
                            PublicationDate = new DateTime(2021, 9, 12, 4, 51, 10, 355, DateTimeKind.Local).AddTicks(8755),
                            Quantity = 7,
                            Title = "Mollitia sed similique sed.",
                            NumberOfPages = 74
                        },
                        new
                        {
                            Id = 11,
                            Author = "Alanis Hahn",
                            PublicationDate = new DateTime(2022, 5, 24, 13, 24, 49, 698, DateTimeKind.Local).AddTicks(3409),
                            Quantity = 7,
                            Title = "Excepturi quos quia dolores.",
                            NumberOfPages = 60
                        },
                        new
                        {
                            Id = 14,
                            Author = "Ned Hauck",
                            PublicationDate = new DateTime(2021, 11, 14, 22, 36, 10, 621, DateTimeKind.Local).AddTicks(4504),
                            Quantity = 9,
                            Title = "Suscipit dolor quia at.",
                            NumberOfPages = 122
                        },
                        new
                        {
                            Id = 20,
                            Author = "Jay Pacocha",
                            PublicationDate = new DateTime(2022, 1, 13, 17, 53, 28, 961, DateTimeKind.Local).AddTicks(1814),
                            Quantity = 7,
                            Title = "Assumenda maxime repellat voluptatem.",
                            NumberOfPages = 117
                        },
                        new
                        {
                            Id = 24,
                            Author = "Addison Shields",
                            PublicationDate = new DateTime(2021, 8, 30, 15, 7, 30, 156, DateTimeKind.Local).AddTicks(1972),
                            Quantity = 10,
                            Title = "Impedit iure et sed.",
                            NumberOfPages = 98
                        },
                        new
                        {
                            Id = 26,
                            Author = "Sandra Bernier",
                            PublicationDate = new DateTime(2020, 12, 6, 10, 31, 5, 835, DateTimeKind.Local).AddTicks(2446),
                            Quantity = 10,
                            Title = "Deleniti excepturi et tenetur.",
                            NumberOfPages = 71
                        },
                        new
                        {
                            Id = 32,
                            Author = "Nya Wyman",
                            PublicationDate = new DateTime(2022, 5, 21, 13, 32, 54, 893, DateTimeKind.Local).AddTicks(9084),
                            Quantity = 9,
                            Title = "Qui molestiae similique dolore.",
                            NumberOfPages = 73
                        },
                        new
                        {
                            Id = 33,
                            Author = "Rosa Predovic",
                            PublicationDate = new DateTime(2022, 3, 25, 19, 11, 27, 699, DateTimeKind.Local).AddTicks(5999),
                            Quantity = 6,
                            Title = "Assumenda soluta id consequatur.",
                            NumberOfPages = 130
                        },
                        new
                        {
                            Id = 37,
                            Author = "Bridget Anderson",
                            PublicationDate = new DateTime(2021, 11, 30, 15, 22, 59, 643, DateTimeKind.Local).AddTicks(4247),
                            Quantity = 10,
                            Title = "Rerum possimus aliquid enim.",
                            NumberOfPages = 67
                        },
                        new
                        {
                            Id = 38,
                            Author = "Glenda Auer",
                            PublicationDate = new DateTime(2020, 11, 25, 3, 15, 21, 726, DateTimeKind.Local).AddTicks(7699),
                            Quantity = 5,
                            Title = "Laboriosam qui animi omnis.",
                            NumberOfPages = 127
                        },
                        new
                        {
                            Id = 39,
                            Author = "Hubert Skiles",
                            PublicationDate = new DateTime(2021, 1, 4, 0, 0, 19, 658, DateTimeKind.Local).AddTicks(2572),
                            Quantity = 10,
                            Title = "Qui dolorum voluptatem provident.",
                            NumberOfPages = 57
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.Dvd", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.Property<string>("Runtime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DVD");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Elmo Gorczany",
                            PublicationDate = new DateTime(2022, 9, 16, 7, 29, 38, 941, DateTimeKind.Local).AddTicks(9365),
                            Quantity = 5,
                            Title = "Suscipit saepe iusto distinctio.",
                            Runtime = "55"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Earl Wuckert",
                            PublicationDate = new DateTime(2022, 2, 18, 1, 23, 54, 964, DateTimeKind.Local).AddTicks(5552),
                            Quantity = 5,
                            Title = "Et odit et corporis.",
                            Runtime = "120"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Bonita Bradtke",
                            PublicationDate = new DateTime(2022, 11, 9, 3, 18, 26, 163, DateTimeKind.Local).AddTicks(862),
                            Quantity = 10,
                            Title = "Ullam quas dolorem neque.",
                            Runtime = "71"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Xander Ondricka",
                            PublicationDate = new DateTime(2021, 8, 15, 8, 39, 1, 210, DateTimeKind.Local).AddTicks(1092),
                            Quantity = 8,
                            Title = "Qui ut vitae enim.",
                            Runtime = "89"
                        },
                        new
                        {
                            Id = 13,
                            Author = "German Dickens",
                            PublicationDate = new DateTime(2021, 7, 15, 13, 6, 56, 175, DateTimeKind.Local).AddTicks(6185),
                            Quantity = 5,
                            Title = "Et non ducimus totam.",
                            Runtime = "63"
                        },
                        new
                        {
                            Id = 17,
                            Author = "Elda O'Connell",
                            PublicationDate = new DateTime(2021, 7, 6, 10, 59, 58, 781, DateTimeKind.Local).AddTicks(4340),
                            Quantity = 9,
                            Title = "Mollitia et ducimus possimus.",
                            Runtime = "51"
                        },
                        new
                        {
                            Id = 21,
                            Author = "Broderick Tromp",
                            PublicationDate = new DateTime(2022, 11, 4, 2, 55, 44, 189, DateTimeKind.Local).AddTicks(5602),
                            Quantity = 10,
                            Title = "Odio ut quos in.",
                            Runtime = "56"
                        },
                        new
                        {
                            Id = 28,
                            Author = "Diego Price",
                            PublicationDate = new DateTime(2021, 5, 21, 4, 4, 47, 491, DateTimeKind.Local).AddTicks(2686),
                            Quantity = 5,
                            Title = "Non molestias natus ad.",
                            Runtime = "125"
                        },
                        new
                        {
                            Id = 29,
                            Author = "Ora O'Hara",
                            PublicationDate = new DateTime(2021, 6, 8, 12, 59, 3, 864, DateTimeKind.Local).AddTicks(6392),
                            Quantity = 9,
                            Title = "Ut nemo qui eveniet.",
                            Runtime = "103"
                        },
                        new
                        {
                            Id = 31,
                            Author = "Erica Anderson",
                            PublicationDate = new DateTime(2022, 8, 15, 22, 19, 4, 436, DateTimeKind.Local).AddTicks(2596),
                            Quantity = 5,
                            Title = "Ea tempore sapiente libero.",
                            Runtime = "121"
                        },
                        new
                        {
                            Id = 34,
                            Author = "Judah Boehm",
                            PublicationDate = new DateTime(2022, 6, 30, 7, 54, 15, 398, DateTimeKind.Local).AddTicks(8490),
                            Quantity = 10,
                            Title = "Nobis officia voluptas consequatur.",
                            Runtime = "65"
                        },
                        new
                        {
                            Id = 35,
                            Author = "Ryann Swaniawski",
                            PublicationDate = new DateTime(2021, 5, 30, 14, 57, 24, 467, DateTimeKind.Local).AddTicks(6374),
                            Quantity = 6,
                            Title = "Perspiciatis odio mollitia molestias.",
                            Runtime = "55"
                        },
                        new
                        {
                            Id = 40,
                            Author = "Abdul Orn",
                            PublicationDate = new DateTime(2020, 12, 27, 1, 3, 10, 226, DateTimeKind.Local).AddTicks(7734),
                            Quantity = 10,
                            Title = "Earum itaque sint dignissimos.",
                            Runtime = "123"
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.Magazine", b =>
                {
                    b.HasBaseType("LibraryMVC.Entity.LibraryItem");

                    b.HasDiscriminator().HasValue("Magazine");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Author = "William Grimes",
                            PublicationDate = new DateTime(2020, 12, 9, 4, 29, 7, 734, DateTimeKind.Local).AddTicks(3795),
                            Quantity = 5,
                            Title = "Alias doloribus nulla non."
                        },
                        new
                        {
                            Id = 4,
                            Author = "Tyson Stokes",
                            PublicationDate = new DateTime(2022, 10, 10, 0, 36, 27, 492, DateTimeKind.Local).AddTicks(7758),
                            Quantity = 6,
                            Title = "Non voluptas quas ut."
                        },
                        new
                        {
                            Id = 5,
                            Author = "Wilton Green",
                            PublicationDate = new DateTime(2021, 4, 28, 9, 1, 57, 882, DateTimeKind.Local).AddTicks(8912),
                            Quantity = 8,
                            Title = "Ab libero aut temporibus."
                        },
                        new
                        {
                            Id = 8,
                            Author = "Jerrod Deckow",
                            PublicationDate = new DateTime(2022, 10, 11, 7, 32, 37, 607, DateTimeKind.Local).AddTicks(4792),
                            Quantity = 9,
                            Title = "Cumque commodi sit alias."
                        },
                        new
                        {
                            Id = 9,
                            Author = "Serenity Mills",
                            PublicationDate = new DateTime(2022, 7, 19, 22, 57, 30, 794, DateTimeKind.Local).AddTicks(5962),
                            Quantity = 7,
                            Title = "Aspernatur quis fugiat tempore."
                        },
                        new
                        {
                            Id = 15,
                            Author = "Evan Daniel",
                            PublicationDate = new DateTime(2022, 3, 29, 1, 21, 52, 532, DateTimeKind.Local).AddTicks(763),
                            Quantity = 7,
                            Title = "Est consectetur corporis modi."
                        },
                        new
                        {
                            Id = 16,
                            Author = "Litzy Maggio",
                            PublicationDate = new DateTime(2022, 1, 5, 22, 59, 30, 999, DateTimeKind.Local).AddTicks(6342),
                            Quantity = 8,
                            Title = "Necessitatibus ut deleniti veritatis."
                        },
                        new
                        {
                            Id = 18,
                            Author = "Ulices Upton",
                            PublicationDate = new DateTime(2022, 8, 28, 1, 23, 12, 79, DateTimeKind.Local).AddTicks(8322),
                            Quantity = 7,
                            Title = "Inventore similique non vero."
                        },
                        new
                        {
                            Id = 19,
                            Author = "Alphonso Kunde",
                            PublicationDate = new DateTime(2021, 7, 21, 11, 11, 40, 899, DateTimeKind.Local).AddTicks(6674),
                            Quantity = 7,
                            Title = "Tenetur eaque fugit natus."
                        },
                        new
                        {
                            Id = 22,
                            Author = "Rachael Romaguera",
                            PublicationDate = new DateTime(2021, 9, 20, 7, 12, 14, 884, DateTimeKind.Local).AddTicks(1530),
                            Quantity = 10,
                            Title = "Quos labore culpa in."
                        },
                        new
                        {
                            Id = 23,
                            Author = "Christy Runolfsdottir",
                            PublicationDate = new DateTime(2022, 6, 9, 20, 0, 36, 957, DateTimeKind.Local).AddTicks(7292),
                            Quantity = 10,
                            Title = "Eum suscipit id iste."
                        },
                        new
                        {
                            Id = 25,
                            Author = "London Lockman",
                            PublicationDate = new DateTime(2022, 8, 27, 17, 6, 17, 33, DateTimeKind.Local).AddTicks(1108),
                            Quantity = 10,
                            Title = "Unde impedit non ducimus."
                        },
                        new
                        {
                            Id = 27,
                            Author = "Jamal Hessel",
                            PublicationDate = new DateTime(2021, 2, 17, 13, 25, 29, 234, DateTimeKind.Local).AddTicks(3815),
                            Quantity = 7,
                            Title = "Illum dolorem deserunt numquam."
                        },
                        new
                        {
                            Id = 30,
                            Author = "Christine Gusikowski",
                            PublicationDate = new DateTime(2021, 1, 12, 11, 57, 13, 146, DateTimeKind.Local).AddTicks(1974),
                            Quantity = 9,
                            Title = "Perspiciatis officiis occaecati iusto."
                        },
                        new
                        {
                            Id = 36,
                            Author = "Della Gusikowski",
                            PublicationDate = new DateTime(2022, 5, 13, 12, 50, 4, 511, DateTimeKind.Local).AddTicks(3971),
                            Quantity = 5,
                            Title = "Laborum voluptates nulla recusandae."
                        });
                });

            modelBuilder.Entity("LibraryMVC.Entity.BorrowingHistory", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", "Borrower")
                        .WithMany("BorrowingHistories")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entity.LibraryItem", "LibraryItem")
                        .WithMany("BorrowingHistories")
                        .HasForeignKey("LibraryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LibraryMVC.Entity.Borrower", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryMVC.Entity.Borrower", b =>
                {
                    b.Navigation("BorrowingHistories");
                });

            modelBuilder.Entity("LibraryMVC.Entity.LibraryItem", b =>
                {
                    b.Navigation("BorrowingHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
